version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mcp-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_PATH=/app/data/db/mcp.db
      - UPLOADS_DIR=/app/data/uploads
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - USE_AZURE_OPENAI=${USE_AZURE_OPENAI:-true}
    volumes:
      - mcp-data:/app/data
    ports:
      # Exposing for direct access/debugging if needed; Caddy will use the internal port.
      - "127.0.0.1:3001:3001"
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mcp-frontend
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/index.html" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network

  caddy:
    image: caddy:2-alpine
    container_name: mcp-caddy
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - mcp-network

volumes:
  mcp-data:
    name: mcp-data
  caddy-data:
    name: mcp-caddy-data
  caddy-config:
    name: mcp-caddy-config

networks:
  mcp-network:
    name: mcp-network
